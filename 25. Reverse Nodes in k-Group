/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {


    public ListNode reverse(ListNode head)
    {
        ListNode prev=null;
        ListNode temp=head;

        while(temp!=null)
        {
            ListNode nextnode=temp.next;
            temp.next=prev;
            prev=temp;
            temp=nextnode; 
        }
        return prev;
    }


    public ListNode findkth(ListNode temp,int k)
    {
        k-=1;
        while(temp!=null && k>0)
        {
            k--;
            temp=temp.next;
        }
        return temp;
    }


    public ListNode reverseKGroup(ListNode head, int k) {
        if(k<=1 && head==null)
        {
            return head;
        }

        ListNode prev=null;
        ListNode temp=head;
        ListNode newhead=null;

        while(temp!=null)
        {
          ListNode kth=findkth(temp,k);
          if(kth==null)
          {
            if(prev!=null)
            {
                prev.next=temp;
            }
            break;
          }  
        ListNode newnode=kth.next;
        kth.next=null;

        ListNode reverselist=reverse(temp);


        if(newhead==null)
        {
           newhead= reverselist;
        }
        else
        {
            prev.next=reverselist;
        }
        prev=temp;
        temp=newnode;
        }

        return newhead;
        
        
    }
}
